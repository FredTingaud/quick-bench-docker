r291939 | malcolm.parsons | 2017-01-13 19:55:32 +0100 (Fri, 13 Jan 2017) | 1 line

Remove unused lambda captures. NFC

Index: tools/clang/lib/AST/CXXInheritance.cpp
===================================================================
--- a/clang/lib/AST/CXXInheritance.cpp	(revision 291938)
+++ a/clang/lib/AST/CXXInheritance.cpp	(revision 291939)
@@ -88,7 +88,7 @@ bool CXXRecordDecl::isDerivedFrom(const CXXRecordD
   const CXXRecordDecl *BaseDecl = Base->getCanonicalDecl();
   // FIXME: Capturing 'this' is a workaround for name lookup bugs in GCC 4.7.
   return lookupInBases(
-      [this, BaseDecl](const CXXBaseSpecifier *Specifier, CXXBasePath &Path) {
+      [BaseDecl](const CXXBaseSpecifier *Specifier, CXXBasePath &Path) {
         return FindBaseClass(Specifier, Path, BaseDecl);
       },
       Paths);
@@ -109,7 +109,7 @@ bool CXXRecordDecl::isVirtuallyDerivedFrom(const C
   const CXXRecordDecl *BaseDecl = Base->getCanonicalDecl();
   // FIXME: Capturing 'this' is a workaround for name lookup bugs in GCC 4.7.
   return lookupInBases(
-      [this, BaseDecl](const CXXBaseSpecifier *Specifier, CXXBasePath &Path) {
+      [BaseDecl](const CXXBaseSpecifier *Specifier, CXXBasePath &Path) {
         return FindVirtualBaseClass(Specifier, Path, BaseDecl);
       },
       Paths);
Index: tools/clang/lib/AST/MicrosoftMangle.cpp
===================================================================
--- a/clang/lib/AST/MicrosoftMangle.cpp	(revision 291938)
+++ a/clang/lib/AST/MicrosoftMangle.cpp	(revision 291939)
@@ -2997,7 +2997,7 @@ void MicrosoftMangleContextImpl::mangleStringLiter
   // N.B. The length is in terms of bytes, not characters.
   Mangler.mangleNumber(SL->getByteLength() + SL->getCharByteWidth());
 
-  auto GetLittleEndianByte = [&Mangler, &SL](unsigned Index) {
+  auto GetLittleEndianByte = [&SL](unsigned Index) {
     unsigned CharByteWidth = SL->getCharByteWidth();
     uint32_t CodeUnit = SL->getCodeUnit(Index / CharByteWidth);
     unsigned OffsetInCodeUnit = Index % CharByteWidth;
@@ -3004,7 +3004,7 @@ void MicrosoftMangleContextImpl::mangleStringLiter
     return static_cast<char>((CodeUnit >> (8 * OffsetInCodeUnit)) & 0xff);
   };
 
-  auto GetBigEndianByte = [&Mangler, &SL](unsigned Index) {
+  auto GetBigEndianByte = [&SL](unsigned Index) {
     unsigned CharByteWidth = SL->getCharByteWidth();
     uint32_t CodeUnit = SL->getCodeUnit(Index / CharByteWidth);
     unsigned OffsetInCodeUnit = (CharByteWidth - 1) - (Index % CharByteWidth);
Index: tools/clang/lib/CodeGen/CGStmtOpenMP.cpp
===================================================================
--- a/clang/lib/CodeGen/CGStmtOpenMP.cpp	(revision 291938)
+++ a/clang/lib/CodeGen/CGStmtOpenMP.cpp	(revision 291939)
@@ -986,7 +986,7 @@ void CodeGenFunction::EmitOMPReductionClauseInit(
                         OriginalBaseLValue);
         // Store the address of the original variable associated with the LHS
         // implicit variable.
-        PrivateScope.addPrivate(LHSVD, [this, OASELValueLB]() -> Address {
+        PrivateScope.addPrivate(LHSVD, [OASELValueLB]() -> Address {
           return OASELValueLB.getAddress();
         });
         // Emit reduction copy.
@@ -1040,9 +1040,8 @@ void CodeGenFunction::EmitOMPReductionClauseInit(
             *this, OrigVD->getType(), ASELValue.getType(), OriginalBaseLValue);
         // Store the address of the original variable associated with the LHS
         // implicit variable.
-        PrivateScope.addPrivate(LHSVD, [this, ASELValue]() -> Address {
-          return ASELValue.getAddress();
-        });
+        PrivateScope.addPrivate(
+            LHSVD, [ASELValue]() -> Address { return ASELValue.getAddress(); });
         // Emit reduction copy.
         bool IsRegistered = PrivateScope.addPrivate(
             OrigVD, [this, OrigVD, PrivateVD, BaseLValue, ASELValue,
@@ -3250,7 +3249,7 @@ static void EmitOMPAtomicCaptureExpr(CodeGenFuncti
     NewVValType = XRValExpr->getType();
     auto *ERValExpr = IsXLHSInRHSPart ? RHS : LHS;
     auto &&Gen = [&CGF, &NewVVal, UE, ExprRValue, XRValExpr, ERValExpr,
-                  IsSeqCst, IsPostfixUpdate](RValue XRValue) -> RValue {
+                  IsPostfixUpdate](RValue XRValue) -> RValue {
       CodeGenFunction::OpaqueValueMapping MapExpr(CGF, ERValExpr, ExprRValue);
       CodeGenFunction::OpaqueValueMapping MapX(CGF, XRValExpr, XRValue);
       RValue Res = CGF.EmitAnyExpr(UE);
@@ -3277,7 +3276,7 @@ static void EmitOMPAtomicCaptureExpr(CodeGenFuncti
     NewVValType = X->getType().getNonReferenceType();
     ExprRValue = convertToType(CGF, ExprRValue, E->getType(),
                                X->getType().getNonReferenceType(), Loc);
-    auto &&Gen = [&CGF, &NewVVal, ExprRValue](RValue XRValue) -> RValue {
+    auto &&Gen = [&NewVVal, ExprRValue](RValue XRValue) -> RValue {
       NewVVal = XRValue;
       return ExprRValue;
     };
index 7a2c864c311..f263fc54a01 100644
--- a/libcxxabi/src/cxa_new_delete.cpp
+++ b/libcxxabi/src/cxa_new_delete.cpp
@@ -173,6 +173,23 @@ operator delete(void* ptr, const std::nothrow_t&)
     ::operator delete(ptr);
 }

+/*
+[new.delete.single]
+
+calls operator delete(ptr)
+*/
+  __attribute__((__weak__, __visibility__("default")))
+  void
+  operator delete(void* ptr, size_t)
+#if __has_feature(cxx_noexcept)
+      noexcept
+  #else
+  throw()
+  #endif
+{
+  ::operator delete(ptr);
+}
+
 /*
 [new.delete.array]

@@ -207,6 +224,23 @@ operator delete[] (void* ptr, const std::nothrow_t&)
     ::operator delete[](ptr);
 }

+/*
+[new.delete.array]
+
+calls operator delete[](ptr)
+*/
+  __attribute__((__weak__, __visibility__("default")))
+  void
+  operator delete[] (void* ptr, size_t)
+#if __has_feature(cxx_noexcept)
+      noexcept
+  #else
+  throw()
+  #endif
+{
+  ::operator delete[](ptr);
+}
+
 namespace std
 {

